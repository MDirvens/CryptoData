// <auto-generated />
using CryptoData;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CryptoData.Migrations
{
    [DbContext(typeof(CryptoDataDbContext))]
    partial class CryptoDataDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.15")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CryptoData.Models.CryptoDataDto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("BestAskPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("BestAskQty")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("BestBidPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("BestBidQty")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long>("OrderBookUpdateId")
                        .HasColumnType("bigint");

                    b.Property<string>("Symbol")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TimeStamp")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CryptoData");
                });
#pragma warning restore 612, 618
        }
    }
}
